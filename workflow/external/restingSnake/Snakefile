configfile: 'config/config.yaml'

module tidy_snake:
    snakefile:
        github("MataiMRI/tidySnake", path="workflow/Snakefile", tag="v0.7.0")
    config: config

use rule * from tidy_snake as tidy_snake_*

RUNS, TEMPLATES = tidy_snake.list_valid_runs(config["resultsdir"], suffix="_dwi")

rule all:
    localrule: True
    default_target: True
    input:
        # rules.tidy_snake_all.input,
        expand("{resultsdir}/bids/derivatives/freesurfer_sub-{subject}_ses-{session}",
            subject=RUNS.subjects,
            session=RUNS.sessions,
            entity=RUNS.entities,
            resultsdir=config["resultsdir"]
        )

ruleorder: freesurfer_longitudinal > freesurfer_long_template > freesurfer_cross_sectional

wildcard_constraints:
    # Ensure proper matching in patterns containing "ses-{session}_{entity}",
    # where {entity} can contain multiple BIDS entities. For example, in
    # "ses-a_task-rest_run-001", session is "a" and entity is "task-rest_run-001"
    session="[^-]"

rule freesurfer_cross_sectional:
    input:
        "{resultsdir}/bids/sub-{subject}/ses-{session}"
    output:
        directory("{resultsdir}/bids/derivatives/freesurfer/sub-{subject}_ses-{session}_{entity}")
    container:
        "docker://nipreps/fmriprep:23.1.3"
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["freesurfer"]["mem_mb"],
        runtime=config["freesurfer"]["time_min"]
    threads: config["freesurfer"]["threads"]
    shell:
        "export FS_LICENSE=$(realpath {config[freesurfer][license_path]}) && "
        "recon-all "
        "-sd {wildcards.resultsdir}/bids/derivatives/freesurfer "
        "-i {input}/anat/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_T1w.nii.gz "
        "-subjid sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity} "
        "-all "
        "-3T "
        "-openmp {threads}"

def list_freesurfer_templates(wildcards):
    inputs = [
        f"{wildcards.resultsdir}/bids/derivatives/freesurfer/{template}"
        for template in set(TEMPLATES[wildcards.subject].values())
    ]
    return inputs

    

def list_freesurfer_timepoints(wildcards):
    inputs = sorted(set(TEMPLATES[wildcards.subject].values()))
    tps = " ".join(f"-tp {template}" for template in inputs)
    return tps

rule freesurfer_long_template:
    input:
        list_freesurfer_templates
    output:
        directory("{resultsdir}/bids/derivatives/freesurfer/{subject}_template")
    container:
        "docker://nipreps/fmriprep:23.1.3"
    params:
        license_path=config["freesurfer"]["license_path"],
        timepoints=list_freesurfer_timepoints
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["freesurfer"]["mem_mb"],
        runtime=config["freesurfer"]["time_min"]
    threads: config["freesurfer"]["threads"]
    shell:
        "export FS_LICENSE=$(realpath {params.license_path}) && "
        "recon-all "
        "-base {wildcards.subject}_template "
        "{params.timepoints} "
        "-sd {wildcards.resultsdir}/bids/derivatives/freesurfer "
        "-all "
        "-3T "
        "-openmp {threads}"

rule freesurfer_longitudinal:
    input:
        "{resultsdir}/bids/sub-{subject}/ses-{session}",
        "{resultsdir}/bids/derivatives/freesurfer/{subject}_template"
    output:
        directory("{resultsdir}/bids/derivatives/freesurfer/sub-{subject}_ses-{session}_{entity}.long.{subject}_template")
    container:
        "docker://nipreps/fmriprep:23.1.3"
    params:
        license_path=config["freesurfer"]["license_path"],
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["freesurfer"]["mem_mb"],
        runtime=config["freesurfer"]["time_min"]
    threads: config["freesurfer"]["threads"]
    shell:
        "export FS_LICENSE=$(realpath {params.license_path}) && "
        "recon-all "
        "-long sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity} "
        "{wildcards.subject}_template "
        "-sd {wildcards.resultsdir}/bids/derivatives/freesurfer "
        "-all "
        "-qcache "
        "-3T "
        "-openmp {threads}"

def freesurfer_rename_input(wildcards):
    """find the required freesurfer output required for a subject/session pair"""

    if config["use_longitudinal"]:
        suffix = f".long.{wildcards.subject}_template"
    else:
        suffix = ""

    anat_template = TEMPLATES[wildcards.subject][wildcards.session]

    return f"{wildcards.resultsdir}/bids/derivatives/freesurfer/{anat_template}{suffix}"

rule freesurfer_rename:
    localrule: True
    input:
        freesurfer_rename_input
    output:
        directory("{resultsdir}/bids/derivatives/freesurfer_sub-{subject}_ses-{session}")
    shell:
        "mkdir -p {output} && ln -s {input} {output}/sub-{wildcards.subject}"